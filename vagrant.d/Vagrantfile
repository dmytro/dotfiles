# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
#VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(2) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.10", virtualbox__intnet: true

  config.vm.usable_port_range = 2200..2250

  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "~/.ssh", "/home/vagrant/.ssh"
  config.vm.synced_folder "~/Development/dotfiles", "/home/vagrant/Development/dotfiles"
  config.vm.synced_folder "~/Development/chef-solo", "/home/vagrant/Development/chef-solo"

  config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", "~/.ssh/vagrant"]


  config.vm.provider "virtualbox" do |v|
    v.gui = false
    v.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
    # vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
    # vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
  end

  config.vm.define :irox do |irox|
    irox.vm.box = "ubuntu14.04"

    irox.vm.synced_folder "~/irox", "/home/vagrant/dev"
    irox.vm.host_name = 'irox.dmytro.local'
    irox.vm.network :forwarded_port, guest: 22,   host: 2261, id: "ssh"
    irox.vm.network :forwarded_port, guest: 3000, host: 3003, id: "rails"
  end

  # config.vm.synced_folder ".", "/vagrant", :nfs => true
  config.vm.define :nagira do |nagira|
    nagira.vm.box = "cent64_minimal"
    nagira.vm.host_name = 'nagira.dmytro.local'
    nagira.vm.network :forwarded_port, guest: 22,   host: 2262, id: "ssh"
    nagira.vm.network :forwarded_port, guest: 4567, host: 3002, id: "rails"
  end


  config.vm.define :coiney do |coiney|
    coiney.vm.box = "coiney_rails"

    secrets = JSON.load File.read File.expand_path('~/Development/coiney/rails/lib/coiney_chef_solo/data_bags/secrets/coiney.json', __dir__)

    require 'vagrant/environment'
    require 'aws-sdk'

    s3 = AWS::S3.new(
                     :access_key_id => secrets['S3_ACCESS_KEY'],
                     :secret_access_key => secrets['S3_SECRET_KEY']
                     )
    object = s3.buckets['coiney-infra'].objects['vagrant/coiney_rails.box']
    url = object.url_for(:get, { :expires => 20*60, :secure => true }).to_s

    config.vm.box_url = url
    coiney.vm.host_name = 'vagrant.coiney.local'
    coiney.vm.network :forwarded_port, guest: 22,   host: 2260, id: "ssh"
    coiney.vm.network :forwarded_port, guest: 3000, host: 3000, id: "rails"

    config.vm.provision "shell", inline: "groupadd --non-unique --gid 500 deploy || true"
    config.vm.provision "shell", inline: "useradd --non-unique --uid 500  --gid 500  --no-create-home --home-dir /home/vagrant deploy || true "
    config.vm.provision "shell", inline: "ln -nfs /home/vagrant /home/deploy || true "

    config.vm.provider "virtualbox" do |vb|
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "1024"]
    end
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end

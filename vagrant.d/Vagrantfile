# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
#VAGRANTFILE_API_VERSION = "2"

require 'yaml'

def install_ruby(version)

end

PACKAGES = {
  ubuntu: {
    common: %w{software-properties-common python-software-properties build-essential git nginx curl},
    rails: %w{rake libxml2 libxml2-dev libxslt-dev zlib1g-dev},
    pg: %w{zlib1g-dev postgresql postgresql-contrib libpq-dev},
    mysql: %w{libmysqlclient-dev}
  }
}

STD_RUBY_VERSION="2.0"
DOTFILES= "https://github.com/dmytro/dotfiles.git"

SETUP_ENVIRONMENT =<<-SCRIPT
      apt-get update
      apt-get remove -qq --assume-yes pico nano
      apt-get install --assume-yes -qq #{PACKAGES[:ubuntu][:common].join(' ')}

  apt-get remove -qq --assume-yes pico nano
  apt-get install -qq -y git zsh curl ruby#{STD_RUBY_VERSION} ruby#{STD_RUBY_VERSION}-dev

  update-alternatives --remove ruby /usr/bin/ruby#{STD_RUBY_VERSION}
  update-alternatives --remove irb /usr/bin/irb#{STD_RUBY_VERSION}
  update-alternatives --remove gem /usr/bin/gem#{STD_RUBY_VERSION}

      update-alternatives \
        --install /usr/bin/ruby ruby /usr/bin/ruby#{STD_RUBY_VERSION} 50 \
        --slave /usr/bin/irb irb /usr/bin/irb#{STD_RUBY_VERSION} \
        --slave /usr/bin/rake rake /usr/bin/rake#{STD_RUBY_VERSION} \
        --slave /usr/bin/gem gem /usr/bin/gem#{STD_RUBY_VERSION} \
        --slave /usr/bin/rdoc rdoc /usr/bin/rdoc#{STD_RUBY_VERSION} \
        --slave /usr/bin/testrb testrb /usr/bin/testrb#{STD_RUBY_VERSION} \
        --slave /usr/bin/erb erb /usr/bin/erb#{STD_RUBY_VERSION} \
        --slave /usr/bin/ri ri /usr/bin/ri#{STD_RUBY_VERSION}

      update-alternatives --config ruby
      update-alternatives --display ruby
      gem install bundler

      test -d ~vagrant/dotfiles || su vagrant -c "git clone #{DOTFILES} && cd ~/dotfiles && rake install "
      chsh -s /bin/zsh vagrant
      echo 'cd /vagrant' >> ~/.zshrc
SCRIPT

Vagrant.configure(2) do |config|

  config.vm.define :basicubuntu do |vm|
    vm.vm.box = "ubuntu14.04"
    vm.vm.hostname = "basic-ubuntu"

    config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--memory", "512"]
    end

    config.vm.provision "shell", inline: SETUP_ENVIRONMENT

  end

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.10", virtualbox__intnet: true

  config.vm.usable_port_range = 2200..2250

  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "~/.ssh", "/home/vagrant/.ssh"
  config.vm.synced_folder "~/Development/dotfiles", "/home/vagrant/Development/dotfiles"
  config.vm.synced_folder "~/Development/chef-solo", "/home/vagrant/Development/chef-solo"

  config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", "~/.ssh/vagrant"]


  config.vm.provider "virtualbox" do |v|
    v.gui = false
    v.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
    # vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
    # vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
  end

  config.vm.define :irox do |irox|
    irox.vm.box = "ubuntu14.04"

    irox.vm.synced_folder "~/irox", "/home/vagrant/dev"
    irox.vm.host_name = 'irox.dmytro.local'
    irox.vm.network :forwarded_port, guest: 22,   host: 2261, id: "ssh"
    irox.vm.network :forwarded_port, guest: 3000, host: 3003, id: "rails"

    config.vm.provider "virtualbox" do |vb|
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "2048"]
    end
  end

  # config.vm.synced_folder ".", "/vagrant", :nfs => true
  config.vm.define :nagira do |nagira|
    nagira.vm.box = "cent64_minimal"
    nagira.vm.host_name = 'nagira.dmytro.local'
    nagira.vm.network :forwarded_port, guest: 22,   host: 2262, id: "ssh"
    nagira.vm.network :forwarded_port, guest: 4567, host: 3002, id: "rails"
  end


  config.vm.define :coiney do |coiney|
    require 'vagrant/environment'
    require 'aws-sdk'

    coiney.vm.box = "coiney_rails"
  coiney.vm.network "private_network", ip: "192.168.56.10" #, virtualbox__intnet: true
#    coiney.vm.network "private_network", ip: "172.28.128.2", virtualbox__intnet: true
    #coiney.vm.network :private_network, :type => "dhcp"
    #coiney.vm.synced_folder "/Users/dmytro/Development/coiney-rails", "/vagrant" , type: "nfs"

    # secrets = (YAML.load_file File.expand_path('~/.fog/'))["default"]


    # s3 = AWS::S3.new(
    #                  :access_key_id => secrets['aws_access_key_id'],
    #                  :secret_access_key => secrets['aws_secret_access_key']
    #                  )
    # object = s3.buckets['coiney-infra'].objects['vagrant/coiney_rails.box']
    # url = object.url_for(:get, { :expires => 20*60, :secure => true }).to_s

    # config.vm.box_url = url
    coiney.vm.host_name = 'vagrant.coiney.local'
    coiney.vm.network :forwarded_port, guest: 22,   host: 2260, id: "ssh"
#    coiney.vm.network :forwarded_port, guest: 3306,   host: 3306, id: "mysql"
    coiney.vm.network :forwarded_port, guest: 3000, host: 3000, id: "rails"
    # coiney.vm.network :forwarded_port, guest: 3306, host: 4306, id: "mysql"
    # coiney.vm.network :forwarded_port, guest: 80, host: 8080, id: "nginx"

    config.vm.provision "shell", inline: "groupadd --non-unique --gid 500 deploy || true"
    config.vm.provision "shell", inline: "useradd --non-unique --uid 500  --gid 500  --no-create-home --home-dir /home/vagrant deploy || true "
    config.vm.provision "shell", inline: "ln -nfs /home/vagrant /home/deploy || true "

    config.vm.provider "virtualbox" do |vb|
      disk = "#{ENV['HOME']}/vagrant.d/disks/coiney_rails_tmp.vdi"
      mysql  = "#{ENV['HOME']}/vagrant.d/disks/coiney_rails_mysql_volume.vdi"
      vb.customize ["modifyvm", :id, "--memory", "1024"]
      unless File.exist?(disk)
        vb.customize ['createhd', '--filename', disk, '--size', 5 * 1024]
      end
      unless File.exist?(mysql)
        vb.customize ['createhd', '--filename', mysql, '--size', 5 * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', disk]
      vb.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', mysql]
      #vb.gui = true
    end
  end

end
